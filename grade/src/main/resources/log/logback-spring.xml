<configuration>
    <contextName>logback</contextName>
    <!-- 文件保存日志的相关配置 -->
    <!-- 输出到控制台 ConsoleAppender-->
    <!--<appender name="console" class="ch.qos.logback.core.ConsoleAppender">-->
        <!--<encoder>-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss} [%class] %-5level %logger- %msg%n</pattern>-->
        <!--</encoder>-->
        <!--&lt;!&ndash; 日志级别过滤器 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--&lt;!&ndash; 过滤的级别 &ndash;&gt;-->
            <!--<level>DEBUG</level>-->
            <!--&lt;!&ndash; 匹配时的操作：接收（记录） &ndash;&gt;-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--&lt;!&ndash; 不匹配时的操作：拒绝（不记录） &ndash;&gt;-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
    <!--</appender>-->
    <!-- 输出到指定文件 -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 保存日志文件的路径 -->
        <!--<file>erhttplog.log</file>-->
        <!-- 日志格式 -->
        <!--
            %d{HH: mm:ss.SSS}——日志输出时间
            %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            %-5level——日志级别，并且使用5个字符靠左对齐
            %logger{36}——日志输出者的名字
            %msg——日志消息
            %n——平台的换行符
        -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%class:%line] - %m%n</pattern>
        </encoder>
        <!-- 日志拆分：基于时间创建日志文件 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志文件名格式 -->
            <fileNamePattern>error_%d{yyyy-MM-dd}.log</fileNamePattern>
            <!-- 最大保存时间：30天-->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!-- 日志级别过滤器 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 过滤的级别 -->
            <level>ERROR</level>
            <!-- 匹配时的操作：接收（记录） -->
            <onMatch>ACCEPT</onMatch>
            <!-- 不匹配时的操作：拒绝（不记录） -->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 基于dubug处理日志：具体控制台或者文件对日志级别的处理还要看所在appender配置的filter，如果没有配置filter，则使用root配置 -->
    <root level="ERROR">
        <appender-ref ref="file" />
    </root>

    <!-- 多环境日志输出 -->
    <!--<springProfile name="test">-->
        <!--<logger name="com.java.jch" appender="console" level="DEBUG"></logger>-->
    <!--</springProfile>-->
    <springProfile name="prod">
        <logger name="com.jch.java" appender="file" level="ERROR"></logger>
    </springProfile>
</configuration>